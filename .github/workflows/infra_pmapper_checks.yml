# GitHub Workflow to execute test cases via Principal Mapper

name: "PMapper Checks"

# Run when PR against main comes through with infracode/testcode changes
on:
  pull_request:
    branches:
      - main
    paths:
      - "infracode/**"
      - "testcode/**"
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:


jobs:
  execute:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2
      - name: Install Graphviz
        run: "sudo apt-get install -y graphviz"
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
      - name: Init Terraform
        run: | 
          cd $GITHUB_WORKSPACE/infracode
          terraform init
      - name: Validate Config
        run: |
          cd $GITHUB_WORKSPACE/infracode
          terraform validate -no-color
      - name: Setup LocalStack
        run: |
          echo "Install LocalStack, AWS CLI, PMapper, Scout Suite via pip"
          pip install localstack principalmapper
          echo "Pull localstack/localstack from Docker"
          docker pull localstack/localstack
          echo "Start LocalStack"
          localstack start -d
          echo "Wait for LocalStack"
          localstack wait -t 30
          echo "LocalStack running"
      - name: Deploy Infra Code
        run: |
          cd $GITHUB_WORKSPACE/infracode
          terraform apply -auto-approve -var "acctid=000000000000"
      - name: Make Artifacts Directory
        run: |
          mkdir -p /tmp/artifacts
      - name: Create PMapper Graph
        env:
          PMAPPER_STORAGE: "/tmp/artifacts"
          AWS_ACCESS_KEY_ID: AKIAFAKEFAKEFAKE
          AWS_SECRET_ACCESS_KEY: alsofakejustmakesthingswork
          AWS_DEFAULT_REGION: us-east-1
          AWS_REGION: us-east-1
        run: |
          pmapper graph create --localstack-endpoint http://localhost:4566 --include-regions us-east-1 --exclude-services autoscaling 
          pmapper --account 000000000000 visualize
          mv 000000000000.svg /tmp/artifacts/visualization.svg
          pmapper --account 000000000000 analysis --output-type text > /tmp/artifacts/analysis.md
      - name: Generate PMapper Graph Artifact
        uses: actions/upload-artifact@v2
        with:
          name: Account Graph
          path: |
            /tmp/artifacts/*.svg
            /tmp/artifacts/*.md
      - name: Execute PMapper Test Cases
        continue-on-error: true
        env:
          PMAPPER_STORAGE: "/tmp/artifacts"
        run: |
          cd $GITHUB_WORKSPACE/testcode
          python -m unittest -v test_permissions.py # DEBUG STEP
          python -m unittest -v test_permissions.py 1> stdout.txt 2> stderr.txt
          export RESULT=$?
          cat stdout.txt stderr.txt
          echo -e "::set-output name=testresults::$(cat stdout.txt stderr.txt)\n"
          exit $RESULT
        id: pmappertests
      - name: Update PR
        uses: actions/github-script@v5
        if: ${{ github.event_name == 'pull_request' }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'PMapper Test Output: ${{ steps.pmappertests.outcome }}\n\n```\nOUTPUTS: ${{ steps.pmappertests.outputs }}\n```'
            })
